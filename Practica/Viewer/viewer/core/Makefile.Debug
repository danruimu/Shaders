#############################################################################
# Makefile for building: libcored.so
# Generated by qmake (2.01a) (Qt 4.8.3) on: lun dic 3 09:21:04 2012
# Project:  core.pro
# Template: lib
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_WEBKIT -DCORE_LIBRARY -DQT_PLUGIN -DQT_OPENGL_LIB -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -m64 -pipe -g -Wall -W -D_REENTRANT -fPIC $(DEFINES)
CXXFLAGS      = -m64 -pipe -g -Wall -W -D_REENTRANT -fPIC $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++-64 -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4/QtOpenGL -I/usr/include/qt4 -Iinclude -I/assig/grau-g/glew/include -I/usr/X11R6/include -Ibuild/debug
LINK          = g++
LFLAGS        = -m64 -shared
LIBS          = $(SUBLIBS)  -L/usr/lib/x86_64-linux-gnu -L/usr/X11R6/lib64 -L/usr/lib/x86_64-linux-gnu/ -lGLU -L/usr/lib/fglrx/ -lQtOpenGL -lQtGui -lQtCore -lGL -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake-qt4
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = build/debug/

####### Files

SOURCES       = src/box.cpp \
		src/camera.cpp \
		src/color.cpp \
		src/face.cpp \
		src/material.cpp \
		src/materiallib.cpp \
		src/object.cpp \
		src/point.cpp \
		src/scene.cpp \
		src/vector.cpp \
		src/vertex.cpp 
OBJECTS       = build/debug/box.o \
		build/debug/camera.o \
		build/debug/color.o \
		build/debug/face.o \
		build/debug/material.o \
		build/debug/materiallib.o \
		build/debug/object.o \
		build/debug/point.o \
		build/debug/scene.o \
		build/debug/vector.o \
		build/debug/vertex.o
DIST          = /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/debug.prf \
		/usr/share/qt4/mkspecs/features/debug_and_release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/build_pass.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/opengl.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		core.pro
QMAKE_TARGET  = cored
DESTDIR       = /home/dani/Qt5.0.0beta2/Tools/Qt/ Creator/bin/../bin
TARGET        = libcored.so
TARGETD       = libcored.so

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile.Debug  /home/dani/Qt5.0.0beta2/Tools/Qt/$(TARGET)

/home/dani/Qt5.0.0beta2/Tools/Qt/$(TARGET):  $(OBJECTS) $(SUBLIBS) $(OBJCOMP)  
	@$(CHK_DIR_EXISTS) /home/dani/Qt5.0.0beta2/Tools/Qt/ || $(MKDIR) /home/dani/Qt5.0.0beta2/Tools/Qt/ 
	-$(DEL_FILE) $(TARGET)
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(LIBS) $(OBJCOMP)
	-$(MOVE) $(TARGET) /home/dani/Qt5.0.0beta2/Tools/Qt/
	{ test -z "$(DESTDIR)" || cd "$(DESTDIR)"; } && test $$(gdb --version | sed -e 's,[^0-9]\+\([0-9]\)\.\([0-9]\).*,\1\2,;q') -gt 72 && gdb --nx --batch --quiet -ex 'set confirm off' -ex "save gdb-index ." -ex quit '$(TARGET)' && test -f $(TARGET).gdb-index && objcopy --add-section '.gdb_index=$(TARGET).gdb-index' --set-section-flags '.gdb_index=readonly' '$(TARGET)' '$(TARGET)' && rm -f $(TARGET).gdb-index || true



qmake:  FORCE
	@$(QMAKE) -spec /usr/share/qt4/mkspecs/linux-g++-64 -o Makefile.Debug core.pro

dist: 
	@$(CHK_DIR_EXISTS) build/debug/cored1.0.0 || $(MKDIR) build/debug/cored1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) build/debug/cored1.0.0/ && $(COPY_FILE) --parents include/box.h include/camera.h include/color.h include/core_global.h include/face.h include/material.h include/materiallib.h include/object.h include/point.h include/scene.h include/vector.h include/vertex.h build/debug/cored1.0.0/ && $(COPY_FILE) --parents src/box.cpp src/camera.cpp src/color.cpp src/face.cpp src/material.cpp src/materiallib.cpp src/object.cpp src/point.cpp src/scene.cpp src/vector.cpp src/vertex.cpp build/debug/cored1.0.0/ && (cd `dirname build/debug/cored1.0.0` && $(TAR) cored1.0.0.tar cored1.0.0 && $(COMPRESS) cored1.0.0.tar) && $(MOVE) `dirname build/debug/cored1.0.0`/cored1.0.0.tar.gz . && $(DEL_FILE) -r build/debug/cored1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile.Debug


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all:
compiler_moc_header_clean:
compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: 

####### Compile

build/debug/box.o: src/box.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/debug/box.o src/box.cpp

build/debug/camera.o: src/camera.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/debug/camera.o src/camera.cpp

build/debug/color.o: src/color.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/debug/color.o src/color.cpp

build/debug/face.o: src/face.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/debug/face.o src/face.cpp

build/debug/material.o: src/material.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/debug/material.o src/material.cpp

build/debug/materiallib.o: src/materiallib.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/debug/materiallib.o src/materiallib.cpp

build/debug/object.o: src/object.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/debug/object.o src/object.cpp

build/debug/point.o: src/point.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/debug/point.o src/point.cpp

build/debug/scene.o: src/scene.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/debug/scene.o src/scene.cpp

build/debug/vector.o: src/vector.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/debug/vector.o src/vector.cpp

build/debug/vertex.o: src/vertex.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o build/debug/vertex.o src/vertex.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

